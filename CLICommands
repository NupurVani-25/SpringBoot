
spring help run
spring version
spring run filename.groovy -- --server.port=9000

To set JVM command line arguments, you can use the JAVA_OPTS environment variable, as shown in the following example:
$ JAVA_OPTS=-Xmx1024m spring run hello.groovy

Packaging Your Application
You can use the jar command to package your application into a self-contained executable jar file, as shown in the following example:
$ spring jar my-app.jar *.groovy

Create A Project:spring init --dependencies=web,data-jpa my-project
(or) spring init --build=gradle --java-version=1.8 --dependencies=websocket --packaging=war sample-app.zip

list the capabilities of the service by using the --list flag:spring init --list

Spring Boot includes command-line completion scripts for the BASH and zsh shells. If you do not use either of these shells (perhaps you are a Windows user), you can use the shell command to launch an integrated shell, as shown in the following example:
$ spring shell

Adding Extensions to the CLI
You can add extensions to the CLI by using the install command. The command takes one or more sets of artifact coordinates in the format group:artifact:version, as shown in the following example:
$ spring install com.example:spring-boot-cli-extension:1.0.0.RELEASE

To uninstall all additional dependencies, you can use the --all option, as shown in the following example:
$ spring uninstall --all

